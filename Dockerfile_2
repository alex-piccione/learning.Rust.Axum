# ----------------------
# Stage 1: Plan dependencies
# ----------------------
FROM rust:1.89-bookworm AS planner
WORKDIR /app

# Copy manifests for dependency caching
COPY Cargo.toml Cargo.lock ./
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Generate cargo build plan (cargo-chef style caching)
RUN cargo chef prepare --recipe-path recipe.json

# ----------------------
# Stage 2: Build
# ----------------------
FROM rust:1.89-bookworm AS builder
WORKDIR /app

# Copy build plan and manifests
COPY --from=planner /app/recipe.json recipe.json
COPY Cargo.toml Cargo.lock ./
RUN cargo chef cook --release --recipe-path recipe.json

# Copy real source and migrations
COPY src ./src
COPY migrations ./migrations
COPY .sqlx ./.sqlx

# Build release binary with LTO and strip symbols
RUN cargo build --release \
    -Z build-std=std,panic_abort \
    -Z build-std-features=panic_immediate_abort \
    --locked \
    && strip target/release/portfolio_api

# ----------------------
# Stage 3: Runtime
# ----------------------
FROM gcr.io/distroless/cc-debian12

# Copy the compiled binary
COPY --from=builder /app/target/release/portfolio_api /usr/local/bin/portfolio_api

# Copy local Docker configuration
COPY --from=builder /app/src/configuration_local_docker.json /configuration.json

# Pass configuration file via ARG/ENV
ARG CONFIGURATION_FILE
ENV CONFIGURATION_FILE=$CONFIGURATION_FILE

# Use non-root user
USER 10001:10001

EXPOSE 3000
ENTRYPOINT ["/usr/local/bin/portfolio_api"]
