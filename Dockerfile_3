# ----------------------
# Stage 1: Build
# ----------------------
FROM rust:1.89-alpine AS builder

# Install build dependencies
RUN apk add --no-cache musl-dev pkgconfig openssl-dev ca-certificates

WORKDIR /app

# Copy manifests for caching
COPY Cargo.toml Cargo.lock ./
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release
RUN rm -f target/release/deps/portfolio_api*

# Copy real source, migrations, and sqlx config
COPY src ./src
COPY migrations ./migrations
COPY .sqlx ./.sqlx

# Build release binary with LTO and strip symbols
RUN cargo build --release \
    -Z build-std=std,panic_abort \
    -Z build-std-features=panic_immediate_abort \
    --locked \
    && strip target/release/portfolio_api

# ----------------------
# Stage 2: Runtime
# ----------------------
FROM alpine:3.19

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata

WORKDIR /app

# Copy compiled binary
COPY --from=builder /app/target/release/portfolio_api /usr/local/bin/portfolio_api

# Copy local Docker configuration
COPY --from=builder /app/src/configuration_local_docker.json /configuration.json

# Pass configuration file via ARG/ENV
ARG CONFIGURATION_FILE
ENV CONFIGURATION_FILE=$CONFIGURATION_FILE

# Use non-root user
RUN addgroup -g 1000 appuser && adduser -D -s /bin/sh -u 1000 -G appuser appuser
USER 10001:10001

EXPOSE 3000
ENTRYPOINT ["/usr/local/bin/portfolio_api"]
